{"version":3,"sources":["Store.js","components/Student/setSingleQuestion.js","components/Student/Student.js","components/Lecturer/helper/StartExam.js","components/Lecturer/ResultDataTableStyle.js","components/Lecturer/ListDataTableStyle.js","components/Lecturer/Questions/Multiple.js","components/Lecturer/Questions/Sortable.js","components/Lecturer/Questions/True_False.js","components/Lecturer/Questions/SingleQuestion.js","components/Lecturer/Questions/CombinationOfTypes.js","components/Lecturer/Lecturer.js","components/Main/Main.js","components/Admin/helper/EditRemoveData.js","components/Admin/ListDataTableStyle.js","components/Admin/Admin.js","App.js","serviceWorker.js","index.js"],"names":["initState","isAuth","token","userType","persistedReducer","persistReducer","key","storage","stateReconciler","hardSet","state","action","type","auth","firstName","lastName","Store","createStore","Persistor","persistStore","element","index","setArrayIndex","className","question","_","times","num","id","htmlFor","name","onChange","e","connect","tempAnswer","history","useHistory","useState","data","setData","answers","setAnswers","buttonText","setButtonText","buttonDisable","time","setTime","hours","minutes","seconds","TimeForTest","start","setStart","ids","setIds","webcam","useRef","pdfRef","btnRef","Record","GetTest","Timer","interval","setInterval","document","getElementById","style","color","clearInterval","current","click","correct","console","log","axios","get","headers","getState","then","response","forEach","push","prevIds","_id","prevData","setSingleQuestion","value","ref","onClick","post","res","elem","parseInt","insertAdjacentHTML","disabled","dispatch","autoPlay","map","newSwal","withReactContent","Swal","headCells","fontFamily","fontSize","fontWeight","textAlign","rows","minHeight","maxHeight","columns","selector","sortable","searchable","center","custifyContent","temp","answer_1","answer_2","answer_3","answer_4","answer_5","score","level","MultipleData","setMultipleData","elements","i","placeholder","target","el","checked","autoFocus","join","url","obj","SortableData","setSortableData","TrueFalseData","setTrueFalseData","label","SingleData","setSingleData","defaultChecked","attr2","Question_View","setQW","toUpperCase","props","setStudentIDs","allowList","setAllowList","resultList","setResultList","groupAllow","setGroupAllow","groupResult","setGroupResult","filterResult","setFilterResult","filterAllow","setFilterAllow","setType","GetResults","GetList","arr","insert","array","filter","onKeyPress","param","duration","number","points","fire","title","html","confirmButtonText","Start","includes","length","FilterAllow","responsive","ListColumns","customStyles","ListStyle","noHeader","fixedHeader","defaultSortField","subject","FilterResult","ResultColumns","ResultStyle","CombinationOfTypes","showError","setShowError","email","setEmail","password","setPassword","useDispatch","msg","setTimeout","row","edit","old_email","defaultValue","preConfirm","val","put","success","delete","cell","EditRemove","list","setList","filterList","setFilterList","setFirstName","setLastName","setSubject","info","setInfo","useEffect","timeEnd","Filter","invalid","App","window","baseURL","Private","path","substr","component","to","Lecturer","Student","Admin","exact","Main","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","loading","persistor","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1c1bd39.chunk.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet'\r\nconst initState = {\r\n    isAuth: false,\r\n    token: null,\r\n    userType: null\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            {\r\n                state = {\r\n                    isAuth: action.auth,\r\n                    token: action.token,\r\n                    userType: action.userType,\r\n                    firstName: action.firstName,\r\n                    lastName: action.lastName\r\n                };\r\n                return state;\r\n            }\r\n        case 'LOGOUT':\r\n            {\r\n                state = {\r\n                    isAuth: false,\r\n                    token: null,\r\n                    userType: null\r\n                };\r\n                return state\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst persistedReducer = persistReducer(\r\n    {\r\n        key: 'root',\r\n        storage: storage,\r\n        stateReconciler: hardSet\r\n    }, reducer);\r\n\r\nconst Store = createStore(persistedReducer);\r\nconst Persistor = persistStore(Store);\r\n\r\nexport { Store, Persistor }\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nexport default (element, index, setArrayIndex) => {\r\n    return <div key={index} className='QuestionGroup'>\r\n        <div className='Question'>\r\n            <span>{index + 1}  </span> {element.question}\r\n        </div>\r\n        <div className='AnswersGroup'>\r\n            {\r\n                _.times(4, num => {\r\n                    return <div className='AnswersGroup--sub' key={num}\r\n                        id={'item_' + index + '_' + num}>\r\n                        <label htmlFor={'item' + index + '_' + num + 1}>\r\n                            <input\r\n                                type='radio'\r\n                                id={'item' + index + '_' + num + 1}\r\n                                name={\"item_\" + index}\r\n                                onChange={e => setArrayIndex(index, num + 1)}\r\n                            />\r\n                            <span> {element['answer_' + (num + 1)]}</span>\r\n                        </label>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    </div >\r\n}","import React, { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport RecordRTC from 'recordrtc';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../../Store';\r\n\r\nimport SweetAlert from 'sweetalert';\r\nimport '../Student/StudentMain.scss';\r\n\r\n\r\n\r\nimport setSingleQuestion from \"./setSingleQuestion\";\r\n\r\n\r\n\r\nfunction Student() {\r\n\r\n\r\n\r\n    let tempAnswer = [];\r\n    const history = useHistory();\r\n    const [data, setData] = useState([]);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [buttonText, setButtonText] = useState('Start Exam');\r\n    const [buttonDisable, setButtonDisable] = useState(false);\r\n    const [time, setTime] = useState('00:00:00');\r\n    const [TimeForTest, setTimeForTest] = useState({ hours: 0, minutes: 1, seconds: 0 });\r\n    const [start, setStart] = useState(true);\r\n    const [ids, setIds] = useState([]);\r\n\r\n    const webcam = useRef();\r\n    const pdfRef = useRef();\r\n    const btnRef = useRef();\r\n\r\n\r\n    const LogOut = () => {\r\n        Store.dispatch({ type: 'LOGOUT' });\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    const StartTest = () => {\r\n\r\n\r\n        Record();\r\n        //GetTest();\r\n    }\r\n\r\n    const FinishTest = () => {\r\n\r\n        //console.log(answers);\r\n        // window.recorder.stopRecording(() => {\r\n        //     window.stream.getTracks().forEach(track => track.stop());\r\n\r\n        //     window.displaystream.getTracks().forEach(dtrack => dtrack.stop());\r\n\r\n        //     console.log(ans);\r\n        //     let fd = new FormData();\r\n        //     let name = Date.now() + '.webm';\r\n        //     fd.append(name, window.recorder.getBlob(), name);\r\n\r\n        //     axios.post('http://localhost:8000/student/upload_video', fd).then(response => {\r\n        //         if (response.data.uploaded) {\r\n        axios.post('/student/TestResult', { answers: answers, ids: ids }, {\r\n            headers: {\r\n                'Authorization': Store.getState().token\r\n            }\r\n        }).then(res => {\r\n            res.data.correct.forEach((elem, index) => {\r\n                if (elem[0] === 'i') document.getElementById('item_' + index + '_' + (parseInt(elem[2]) - 1)).insertAdjacentHTML('beforeend', '<span class=\"wrong_mark\">&#10006</span>');\r\n                else document.getElementById('item_' + index + '_' + (parseInt(elem[2]) - 1)).insertAdjacentHTML('beforeend', '<span class=\"correct_mark\">&#10004</span>')\r\n\r\n            })\r\n        });\r\n\r\n        //         }\r\n        //     });\r\n\r\n        // });\r\n    }\r\n\r\n    let SWErrorAlert = (msg) => {\r\n        SweetAlert({\r\n            title: 'Error',\r\n            text: msg,\r\n            icon: 'error',\r\n            buttons: {\r\n                confirm: { text: 'OK' },\r\n            }\r\n        })\r\n    }\r\n\r\n    // let SWWarningAlert = (msg) => {\r\n    //     SweetAlert({\r\n    //         title: 'Warning',\r\n    //         text: msg,\r\n    //         icon: 'warning',\r\n    //         buttons: {\r\n    //             confirm: { text: 'OK' },\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n\r\n    let Record = () => {\r\n        // navigator.mediaDevices.getUserMedia({\r\n        //     video: true,\r\n        //     audio: false,\r\n        // }).then(stream => {\r\n        //     window.stream = stream;\r\n        //     if (stream.active) {\r\n        //         webcam.current.srcObject = stream;\r\n        //         navigator.mediaDevices.getDisplayMedia({ video: true }).then(displaystream => {\r\n        //             window.displaystream = displaystream;\r\n        //             if (displaystream.getVideoTracks()[0].getSettings().displaySurface === \"monitor\") {\r\n        //                 if (displaystream.active) {\r\n        setButtonText('Finish Exam');\r\n        GetTest();\r\n        Timer();\r\n        //                     window.recorder = new RecordRTC([stream, displaystream], {\r\n        //                         disableLogs: true,\r\n        //                         mimeType: 'video/webm;codecs=vp8',\r\n        //                         type: 'video',\r\n        //                         checkForInactiveTracks: true,\r\n        //                     });\r\n        //                     window.recorder.startRecording();\r\n        //                 }\r\n        //             } else SWErrorAlert('Share only full monitor');\r\n        //         }).catch(err => SWErrorAlert(err.toString()));\r\n        //     }\r\n        // }).catch(err => SWErrorAlert(err.toString()));\r\n    }\r\n\r\n\r\n    let Timer = () => {\r\n\r\n        // if (!finish) {\r\n        let hours = TimeForTest.hours, minutes = TimeForTest.minutes, seconds = TimeForTest.seconds;\r\n        let dh, ds, dm;\r\n        let interval = setInterval(() => {\r\n\r\n            if (seconds === 0 && minutes !== 0) {\r\n                minutes--;\r\n                seconds = 59;\r\n            } else if (minutes === 0 && seconds === 0 && hours !== 0) {\r\n                hours--;\r\n                minutes = 59;\r\n                seconds = 59;\r\n            }\r\n\r\n            hours < 10 ? dh = '0' + hours : dh = hours;\r\n            minutes < 10 ? dm = '0' + minutes : dm = minutes;\r\n            seconds < 10 ? ds = '0' + seconds : ds = seconds;\r\n            setTime(dh + ':' + dm + ':' + ds);\r\n            if (seconds === 10) {\r\n                document.getElementById('show_time').style.color = '#FF0000';\r\n            }\r\n\r\n            if (hours === 0 && minutes === 0 && seconds === 0) {\r\n                clearInterval(interval);\r\n                //FinishTest();\r\n                btnRef.current.click();\r\n            }\r\n            seconds--;\r\n        }, 1000)\r\n    }\r\n\r\n    const setArrayIndex = (index, correct) => {\r\n        tempAnswer[index] = correct;\r\n        setAnswers(tempAnswer);\r\n        console.log(answers);\r\n    }\r\n    let GetTest = () => {\r\n        axios.get('/student/GetTest', {\r\n            headers: {\r\n                'Authorization': Store.getState().token\r\n            }\r\n        }).then(response => {\r\n            response.data.forEach((element, index) => {\r\n                tempAnswer.push(0);\r\n                setIds(prevIds => [...prevIds, element._id]);\r\n                setData(prevData => [...prevData, setSingleQuestion(element, index, setArrayIndex)]);\r\n            });\r\n            setAnswers(tempAnswer);\r\n        })\r\n    };\r\n\r\n    return (\r\n\r\n        <div className='TestView'>\r\n            <div className='TimerView'>\r\n                <span id='show_time'>\r\n                    {time}\r\n                </span>\r\n                <input type='button' value={buttonText} ref={btnRef} onClick={() => {\r\n                    start ? StartTest() : FinishTest();\r\n                    setStart(false);\r\n                }} disabled={buttonDisable} />\r\n\r\n                <input type='button' value='Logout' onClick={e => LogOut()} />\r\n                <video className='VideoView' ref={webcam} autoPlay={true}></video>\r\n            </div>\r\n            <div className='QuestionView' ref={pdfRef}>\r\n                {\r\n                    data.map(elem => {\r\n                        return elem\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default connect()(Student);\r\n\r\n","import Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport React, { useState } from 'react';\r\n\r\nconst newSwal = withReactContent(Swal);\r\n\r\n\r\n\r\nexport default () => {\r\n    let param = {\r\n        duration: 0,\r\n        number: 0,\r\n        points: 0\r\n    };\r\n\r\n    newSwal.fire({\r\n        title: 'Exam',\r\n        html: <>\r\n            <input type='number'\r\n                placeholder={\"Duration (min)\"}\r\n                onChange={e => param.duration = e.target.value}\r\n                className='input' />\r\n            <input type='number'\r\n                placeholder={\"Number of question\"}\r\n                onChange={e => param.number = e.target.value}\r\n                className='input' />\r\n            <input type='number'\r\n                placeholder={\"Points\"}\r\n                onChange={e => param.points = e.target.value}\r\n                className='input' />\r\n\r\n        </>,\r\n        confirmButtonText: 'Start'\r\n    })\r\n    //  console.log(studentIDs);\r\n}","let style = {\r\n\r\n    headCells: {\r\n        style: {\r\n            fontFamily: 'Roboto, MotionPicture, TitilliumWeb, Arial',\r\n            fontSize: \"22px\",\r\n            fontWeight: 'bolder',\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n\r\n    rows: {\r\n        style: {\r\n            fontFamily: 'Roboto, MotionPicture, TitilliumWeb, Arial',\r\n            fontSize: \"18px\",\r\n            fontWeight: 'bolder',\r\n            minHeight: \"35px\",\r\n            maxHeight: \"35px\",\r\n            color: \"black\",\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n};\r\n\r\nlet columns = [\r\n    {\r\n        name: \"First name\",\r\n        selector: \"firstName\",\r\n        sortable: true,\r\n        searchable: true,\r\n        center: true,\r\n    },\r\n    {\r\n        name: \"Last name\",\r\n        selector: \"lastName\",\r\n        sortable: true,\r\n        center: true,\r\n        searchable: true\r\n    },\r\n    {\r\n        name: \"Subject\",\r\n        selector: \"subject\",\r\n        sortable: true,\r\n        center: true,\r\n    },\r\n    {\r\n        name: \"Score\",\r\n        selector: \"score\",\r\n        sortable: true,\r\n        center: true,\r\n    },\r\n];\r\n\r\n\r\nexport { style, columns };","let style = {\r\n\r\n    headCells: {\r\n        style: {\r\n            fontFamily: 'Roboto, MotionPicture, TitilliumWeb, Arial',\r\n            fontSize: \"22px\",\r\n            fontWeight: 'bolder',\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n\r\n    columns: {\r\n        style: {\r\n            custifyContent: 'center'\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            fontFamily: 'Roboto, MotionPicture, TitilliumWeb, Arial',\r\n            fontSize: \"18px\",\r\n            fontWeight: 'bolder',\r\n            minHeight: \"35px\",\r\n            maxHeight: \"35px\",\r\n            color: \"black\",\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n};\r\n\r\nlet columns = [\r\n    {\r\n        name: \"First name\",\r\n        selector: \"firstName\",\r\n        sortable: true,\r\n        searchable: true,\r\n        center: true,\r\n    },\r\n    {\r\n        name: \"Last name\",\r\n        selector: \"lastName\",\r\n        sortable: true,\r\n        center: true,\r\n        searchable: true\r\n    },\r\n    {\r\n        name: \"Allow\",\r\n        selector: \"allow\",\r\n        center: true,\r\n    }\r\n];\r\n\r\n\r\nexport { style, columns };","import React, { useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\n\r\nexport default () => {\r\n  let url = \"http://localhost:8000/lecturer\";\r\n  let temp = [0, 0, 0, 0, 0, 0];\r\n\r\n  let ref = useRef([5]);\r\n  let [MultipleData, setMultipleData] = useState({\r\n    type: 1,\r\n    correct: \"\",\r\n    question: \"\",\r\n    answer_1: \"\",\r\n    answer_2: \"\",\r\n    answer_3: \"\",\r\n    answer_4: \"\",\r\n    answer_5: \"\",\r\n    // answer_6: \"\",\r\n    score: \"3\",\r\n    level: \"B\",\r\n  });\r\n\r\n  let AddQuestion = () => {\r\n    MultipleData.correct = temp.join(\"\");\r\n\r\n    axios\r\n\r\n      .post(url + \"/InsertQuestion\", {\r\n        data: MultipleData,\r\n      })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setMultipleData({\r\n            question: \"\",\r\n            answer_1: \"\",\r\n            answer_2: \"\",\r\n            answer_3: \"\",\r\n            answer_4: \"\",\r\n            answer_5: \"\",\r\n            //answer_6: \"\",\r\n            score: \"3\",\r\n            level: \"B\",\r\n            type: 1\r\n          });\r\n          _.map(ref.current, (obj) => {\r\n            obj.checked = false;\r\n          });\r\n        }\r\n\r\n      });\r\n  };\r\n\r\n  let elements = [];\r\n\r\n  for (let i = 1; i <= 5; i++) {\r\n    elements.push(\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup--sub\" key={i}>\r\n        <input\r\n          value={MultipleData['answer_' + i]}\r\n          placeholder={\"Answer \" + i}\r\n          type=\"text\"\r\n          className=\"AnswersGroup\"\r\n          onChange={(e) =>\r\n            setMultipleData({\r\n              ...MultipleData,\r\n              [\"answer_\" + i]: e.target.value,\r\n            })\r\n          }\r\n        />\r\n        <span className=\"attr\">\r\n          <input\r\n            ref={(el) => (ref.current[i - 1] = el)}\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            name=\"radio\"\r\n            onChange={(e) => {\r\n              temp[i - 1] = e.target.checked ? 1 : 0;\r\n            }}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"Lecturer_SelectView_Group\">\r\n      <textarea\r\n        autoFocus={true}\r\n        value={MultipleData.question}\r\n        placeholder=\"Question\"\r\n        className=\"Question\"\r\n        onChange={(e) =>\r\n          setMultipleData({ ...MultipleData, question: e.target.value })\r\n        }\r\n      />\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup\">\r\n        {elements}\r\n\r\n        <div className=\"Lecturer_SelectView_Group_InputGroup--sub\">\r\n          {/* <div>\r\n            <input\r\n              value={MultipleData.score}\r\n              placeholder=\"Point\"\r\n              type=\"number\"\r\n              className=\"AnswersGroup\"\r\n              onChange={(e) =>\r\n                setMultipleData({ ...MultipleData, score: e.target.value })\r\n              }\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Point: 3</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Level of difficulty: B</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={(e) => AddQuestion()}>Add question</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default () => {\r\n  let url = \"http://localhost:8000/lecturer\";\r\n  let [SortableData, setSortableData] = useState({\r\n    correct: \"1,2,3,4,5,6\",\r\n    type: 4,\r\n    question: \"\",\r\n    answer_1: \"\",\r\n    answer_2: \"\",\r\n    answer_3: \"\",\r\n    answer_4: \"\",\r\n    answer_5: \"\",\r\n    // answer_6: \"\",\r\n    score: '4',\r\n    level: 'C',\r\n  });\r\n\r\n  let elements = [];\r\n  let AddQuestion = () => {\r\n    axios.post(url + \"/InsertQuestion\", {\r\n      data: SortableData,\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setSortableData({\r\n          correct: \"1,2,3,4,5,6\",\r\n          type: 4,\r\n          question: \"\",\r\n          answer_1: \"\",\r\n          answer_2: \"\",\r\n          answer_3: \"\",\r\n          answer_4: \"\",\r\n          answer_5: \"\",\r\n          //answer_6: \"\",\r\n          score: '4',\r\n          level: 'C',\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n\r\n    elements.push(\r\n\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup--sub\" key={i}>\r\n        <input\r\n          placeholder={\"Answer \" + (i + 1)}\r\n          value={SortableData['answer_' + (i + 1)]}\r\n          type=\"text\"\r\n          className=\"AnswersGroup\"\r\n          onChange={(e) =>\r\n            setSortableData({ ...SortableData, [\"answer_\" + (i + 1)]: e.target.value })\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"Lecturer_SelectView_Group Sortable\">\r\n      <textarea\r\n        autoFocus={true}\r\n        placeholder=\"Question\"\r\n        className=\"Question\"\r\n        value={SortableData.question}\r\n        onChange={(e) =>\r\n          setSortableData({ ...SortableData, question: e.target.value })\r\n        }\r\n      ></textarea>\r\n\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup\">\r\n        {elements}\r\n        <div className=\"Lecturer_SelectView_Group_InputGroup--sub\">\r\n          {/* <div>\r\n            <input\r\n              value={SortableData.score}\r\n              placeholder=\" Point\"\r\n              type=\"number\"\r\n              className=\"AnswersGroup\"\r\n              onChange={(e) =>\r\n                setSortableData({ ...SortableData, score: e.target.value })\r\n              }\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Point: 4</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Level of difficulty: C</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={(e) => AddQuestion()}>Add question</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { MDBInput } from \"mdbreact\";\r\nimport axios from \"axios\";\r\n\r\nexport default () => {\r\n  let url = \"http://localhost:8000/lecturer\";\r\n  let [TrueFalseData, setTrueFalseData] = useState({\r\n    correct: true,\r\n    type: 3,\r\n    question: \"\",\r\n    score: \"1\",\r\n    level: \"A\",\r\n  });\r\n  let ref = useRef([]);\r\n  let AddQuestion = () => {\r\n    axios.post(url + \"/InsertQuestion\", {\r\n      data: TrueFalseData,\r\n    })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setTrueFalseData({\r\n            correct: true,\r\n            question: \"\",\r\n            score: \"1\",\r\n            level: \"A\",\r\n            type: 3\r\n          });\r\n          ref.current[0].checked = true;\r\n        }\r\n      });\r\n    //console.log(TrueFalse_data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Lecturer_SelectView_Group TrueFalse\">\r\n      <textarea\r\n        value={TrueFalseData.question}\r\n        autoFocus={true}\r\n        className=\"Question\"\r\n        placeholder=\"Question\"\r\n        onChange={(e) =>\r\n          setTrueFalseData({ ...TrueFalseData, question: e.target.value })\r\n        }\r\n      ></textarea>\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup\">\r\n        <div className=\"Lecturer_SelectView_Group_InputGroup--sub\">\r\n          <MDBInput\r\n            ref={(el) => {\r\n              ref.current[0] = el;\r\n            }}\r\n            type=\"radio\"\r\n            label=\" True\"\r\n            name=\"radio\"\r\n            className=\"type_select\"\r\n            onChange={(e) =>\r\n              setTrueFalseData({ ...TrueFalseData, correct: true })\r\n            }\r\n            checked={TrueFalseData.correct}\r\n          />\r\n\r\n          <MDBInput\r\n            ref={(el) => {\r\n              ref.current[0] = el;\r\n            }}\r\n            type=\"radio\"\r\n            label=\" False\"\r\n            name=\"radio\"\r\n            className=\"type_select\"\r\n            onChange={(e) =>\r\n              setTrueFalseData({ ...TrueFalseData, correct: false })\r\n            }\r\n            checked={!TrueFalseData.correct}\r\n          />\r\n        </div>\r\n        <div className=\"Lecturer_SelectView_Group_InputGroup--sub\">\r\n          {/* <div>\r\n            <input\r\n              value={TrueFalseData.score}\r\n              placeholder=\"Point\"\r\n              type=\"number\"\r\n              className=\"AnswersGroup\"\r\n              onChange={(e) =>\r\n                setTrueFalseData({ ...TrueFalseData, score: e.target.value })\r\n              }\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Point: 1</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Level of difficulty: A</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={(e) => AddQuestion()}>Add question</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default () => {\r\n  let url = \"http://localhost:8000/lecturer\";\r\n  let elements = [];\r\n  let ref = useRef([]);\r\n  let [SingleData, setSingleData] = useState({\r\n    correct: 1,\r\n    type: 2,\r\n    question: \"\",\r\n    answer_1: \"\",\r\n    answer_2: \"\",\r\n    answer_3: \"\",\r\n    answer_4: \"\",\r\n    score: '2',\r\n    level: 'A',\r\n  });\r\n  let AddQuestion = () => {\r\n    axios.post(url + \"/InsertQuestion\", {\r\n      data: SingleData,\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setSingleData({\r\n          correct: 1,\r\n          question: \"\",\r\n          answer_1: \"\",\r\n          answer_2: \"\",\r\n          answer_3: \"\",\r\n          answer_4: \"\",\r\n          score: \"2\",\r\n          level: \"A\",\r\n          type: 2\r\n        });\r\n        ref.current[0].checked = true;\r\n      }\r\n    });\r\n  };\r\n\r\n  for (let i = 1; i <= 4; i++) {\r\n    elements.push(\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup--sub\" key={i}>\r\n        <input\r\n\r\n          value={SingleData['answer_' + i]}\r\n          placeholder={\"Answer \" + i}\r\n          type=\"text\"\r\n          className=\"AnswersGroup\"\r\n          onChange={(e) =>\r\n            setSingleData({ ...SingleData, [\"answer_\" + i]: e.target.value })\r\n          }\r\n        />\r\n        <span className=\"attr\">\r\n          <input\r\n            className='radio'\r\n            ref={(el) => (ref.current[i - 1] = el)}\r\n            type=\"radio\"\r\n            name=\"radio\"\r\n            defaultChecked={i === 1 ? true : false}\r\n            onChange={(e) => setSingleData({ ...SingleData, correct: i })}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Lecturer_SelectView_Group Single\">\r\n      <textarea\r\n        autoFocus={true}\r\n        value={SingleData.question}\r\n        placeholder=\"Question\"\r\n        className=\"Question\"\r\n        onChange={(e) =>\r\n          setSingleData({ ...SingleData, question: e.target.value })\r\n        }\r\n      ></textarea>\r\n      <div className=\"Lecturer_SelectView_Group_InputGroup\">\r\n        {elements}\r\n\r\n        <div className=\"Lecturer_SelectView_Group_InputGroup--sub\">\r\n          {/* <div>\r\n            <input\r\n              value={SingleData.score}\r\n              placeholder=\" Point\"\r\n              type=\"number\"\r\n              className=\"AnswersGroup\"\r\n              onChange={(e) =>\r\n                setSingleData({ ...SingleData, score: e.target.value })\r\n              }\r\n            />\r\n          </div> */}\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Point: 2</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"AnswersGroup none\">Level of difficulty: A</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={(e) => AddQuestion()}>Add question</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport IMQuestion from \"./Multiple\";\r\nimport ISQuestion from \"./Sortable\";\r\nimport ITFQuestion from \"./True_False\";\r\nimport ISingle from \"./SingleQuestion\";\r\n\r\nexport default () => {\r\n    let attr1 = ['ITrueFalse', \"ISingle\", 'IMultiple', 'ISortable',];\r\n    let attr2 = ['Is true/false', \"Is single\", 'Is multiple', 'Is sortable',];\r\n\r\n    let [Question_View, setQW] = useState('ITRUEFALSE');\r\n\r\n    return (\r\n        <div className=\"Lecturer\">\r\n            <div className=\"Lecturer_SelectType\">\r\n                <div className=\"Lecturer_SelectType--sub\">\r\n                    {\r\n                        attr1.map((elem, index) => {\r\n                            return (\r\n                                <div className='type_select' key={index}>\r\n                                    <label htmlFor={elem}>\r\n                                        <input\r\n                                            defaultChecked={index === 0 ? true : false}\r\n                                            id={elem}\r\n                                            name='type'\r\n                                            type='radio'\r\n                                            value={elem}\r\n                                            onChange={e => {\r\n                                                setQW(e.target.value.toUpperCase());\r\n\r\n                                            }} />\r\n                                        <span> {attr2[index]}</span>\r\n                                    </label>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Lecturer_SelectView\">\r\n                {\r\n                    {\r\n                        \"ITRUEFALSE\": <ITFQuestion />,\r\n                        'ISINGLE': <ISingle />,\r\n                        \"IMULTIPLE\": <IMQuestion />,\r\n                        'ISORTABLE': <ISQuestion />\r\n                    }[Question_View]\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport DataTable from \"react-data-table-component\";\r\n\r\nimport Start from './helper/StartExam';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Store } from '../../Store';\r\n// //Include SCSS Files\r\nimport \"./LecturerMain.scss\";\r\nimport \"./question.scss\";\r\n\r\n\r\n///\r\n\r\n\r\n///\r\n// //Own Components\r\nimport { style as ResultStyle, columns as ResultColumns } from './ResultDataTableStyle.js';\r\nimport { style as ListStyle, columns as ListColumns } from './ListDataTableStyle.js';\r\nimport CombinationOfTypes from \"./Questions/CombinationOfTypes\";\r\n\r\n\r\nfunction Lecturer(props) {\r\n\r\n  let url = \"/lecturer\";\r\n  const history = useHistory();\r\n\r\n\r\n  const [studentIDs, setStudentIDs] = useState([]);\r\n  const [allowList, setAllowList] = useState([]);\r\n  const [resultList, setResultList] = useState([]);\r\n  const [groupAllow, setGroupAllow] = useState('');\r\n  const [groupResult, setGroupResult] = useState('');\r\n  const [filterResult, setFilterResult] = useState([]);\r\n  const [filterAllow, setFilterAllow] = useState([]);\r\n\r\n\r\n\r\n  let [type, setType] = useState('');\r\n\r\n  let GetResults = () => {\r\n\r\n    axios.get(url + \"/GetStudentsResult?group=\" + groupResult, {\r\n      headers: {\r\n        'Authorization': Store.getState().token\r\n      }\r\n    }).then(res => {\r\n      setResultList([]);\r\n      setResultList(res.data);\r\n      setFilterResult(res.data);\r\n    });\r\n\r\n  };\r\n\r\n  let FilterAllow = (value) => {\r\n    let arr = allowList.filter(elem => elem.firstName.includes(value) || elem.lastName.includes(value));\r\n    if (arr.length > 0) setFilterAllow(arr); else setFilterAllow(allowList);\r\n  }\r\n\r\n  let FilterResult = (value) => {\r\n    let arr = resultList.filter(elem => elem.firstName.includes(value) || elem.lastName.includes(value) ||\r\n      elem.subject.includes(value));\r\n\r\n    if (arr.length > 0) setFilterResult(arr); else setFilterResult(resultList);\r\n    console.log(arr)\r\n  }\r\n\r\n\r\n\r\n  let Insert_RemoveID = (value, insert) => {\r\n    if (insert) setStudentIDs(array => [...array, value]); else\r\n      setStudentIDs(array => array.filter(elem => elem !== value));\r\n  }\r\n\r\n  const LogOut = () => {\r\n    Store.dispatch({ type: 'LOGOUT' });\r\n    history.push('/');\r\n\r\n  }\r\n\r\n\r\n  let GetList = () => {\r\n    axios.get(url + \"/GetStudentsList?group=\" + groupAllow, {\r\n      headers: {\r\n        'Authorization': Store.getState().token\r\n      }\r\n    }).then(res => {\r\n      setAllowList([]);\r\n      let arr = [];\r\n      res.data.forEach(elem => {\r\n        arr.push({\r\n          'firstName': elem.firstName,\r\n          'lastName': elem.lastName,\r\n          'allow': <input type='checkbox'\r\n            value={elem._id}\r\n            onChange={e => Insert_RemoveID(e.target.value, e.target.checked)} />\r\n        })\r\n      })\r\n      setAllowList(arr);\r\n      setFilterAllow(arr);\r\n\r\n    });\r\n  }\r\n\r\n\r\n\r\n  let Examination = () => {\r\n\r\n    return <>\r\n      <div className=\"menu2 lc\" >\r\n        <div className='control'>\r\n          <input type='text' value={groupAllow}\r\n            autoFocus={true}\r\n            placeholder=\"Group\"\r\n            className='input'\r\n            onKeyPress={e => { if (e.key === 'Enter') GetList() }}\r\n            onChange={e => setGroupAllow(e.target.value)} />\r\n          <input type='button' className='btn' value='Find' onClick={e => GetList()} />\r\n          <input type='button' className='btn' value='Start' onClick={e => Start()} />\r\n        </div>\r\n        <input type='text' className='input' placeholder='Search' onChange={e => FilterAllow(e.target.value)} />\r\n      </div>\r\n\r\n\r\n      <DataTable\r\n        data={filterAllow}\r\n        responsive={true}\r\n        columns={ListColumns}\r\n        customStyles={ListStyle}\r\n        noHeader={true}\r\n        fixedHeader={true}\r\n        className='ListViewDatatable'\r\n        defaultSortField='firstName'\r\n      />\r\n    </>\r\n  }\r\n\r\n  // let Settings = () => {\r\n  //   return <div className='settings'>\r\n  //     <div>\r\n  //       <input type='button' className='btn' value='Change Email' />\r\n  //       <input type='button' className='btn' value='Change Password' />\r\n  //     </div>\r\n  //     <div>\r\n\r\n  //     </div>\r\n  //   </div>\r\n\r\n  // }\r\n\r\n  let Result = () => {\r\n    return <>\r\n      <div className=\"menu2\" >\r\n        <div>\r\n          <input type='text' value={groupResult}\r\n            autoFocus={true}\r\n            placeholder=\"Group\"\r\n            className='input'\r\n            onKeyPress={e => { if (e.key === 'Enter') GetResults() }}\r\n            onChange={e => setGroupResult(e.target.value)} />\r\n          <input type='button' className='btn' value='Show Results' onClick={e => GetResults()} />\r\n        </div>\r\n        <input type='text' className='input' placeholder='Search' onChange={e => FilterResult(e.target.value)} />\r\n      </div>\r\n\r\n      <DataTable\r\n        data={filterResult}\r\n        columns={ResultColumns}\r\n        responsive={true}\r\n        customStyles={ResultStyle}\r\n        noHeader={true}\r\n        fixedHeader={true}\r\n        className='ResultViewDatatable'\r\n        defaultSortField='firstName'\r\n      />\r\n    </>\r\n  }\r\n\r\n\r\n  // if (!Store.getState().isAuth) return <Redirect from='/lecturer' to='/' />;\r\n  // else \r\n  return (\r\n    <>\r\n      <div id=\"view\">\r\n        <div id=\"menu\">\r\n          <span className=\"name\">{Store.getState().firstName} {Store.getState().lastName}</span>\r\n          <div id=\"control\">\r\n            <input\r\n              type=\"button\"\r\n              className=\"btn\"\r\n              value=\"Result\"\r\n              id=\"student\"\r\n              onClick={(e) => setType('Result')}\r\n            />\r\n            <input type=\"button\"\r\n              className=\"btn\"\r\n              value=\"Add Question\"\r\n              onClick={e => setType('Question')} />\r\n\r\n            <input type=\"button\"\r\n              autoFocus={true}\r\n              className=\"btn\"\r\n              value=\"Examination\"\r\n              onClick={e => setType('Exam')} />\r\n\r\n            {/* <input type=\"button\"\r\n              className=\"btn\"\r\n              value=\"Settings\"\r\n              onClick={e => setType('Settings')} /> */}\r\n\r\n            <input type=\"button\"\r\n              className=\"btn\"\r\n              value=\"Log Out\"\r\n              onClick={e => LogOut()} />\r\n          </div>\r\n        </div>\r\n        {\r\n          {\r\n            'Exam': Examination(),\r\n            'Result': Result(),\r\n            'Question': CombinationOfTypes(),\r\n            //'Settings': Settings()\r\n          }[type]\r\n        }\r\n\r\n      </div>\r\n    </>)\r\n}\r\n\r\nexport default connect()(Lecturer);","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n\r\nimport axios from 'axios';\r\nimport './Main.scss';\r\n\r\n\r\nfunction Main() {\r\n\r\n    const [showError, setShowError] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const history = useHistory();\r\n\r\n    let SignIn = () => {\r\n        axios.post('/user/sign_in', { email: email, password: password }).then(res => {\r\n            if (res.data.msg) {\r\n                setShowError(res.data.msg);\r\n                setTimeout(() => {\r\n                    setShowError('');\r\n                }, 3000);\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: 'LOGIN',\r\n                    auth: true,\r\n                    token: 'Bearer ' + res.data.token,\r\n                    userType: res.data.type,\r\n                    firstName: res.data.firstName,\r\n                    lastName: res.data.lastName\r\n                });\r\n                history.push(res.data.type);\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <div className='Main'>\r\n                <input type='email'\r\n                    onChange={e => setEmail(e.target.value)}\r\n                    value={email}\r\n                    placeholder='Email'\r\n                    className='input' />\r\n                <input type='password'\r\n                    onChange={e => setPassword(e.target.value)}\r\n                    value={password}\r\n                    placeholder='Password'\r\n                    className='input' />\r\n                <span className='forgot'>Forgot Password?</span>\r\n                <input type='button'\r\n                    onClick={e => SignIn()}\r\n                    value='Sign In'\r\n                    className='btn' />\r\n                <span className='error'>{showError}</span>\r\n                {/* <div className='container--send'>\r\n        <input type='email'\r\n            onChange={e => setEmail(e.target.value)}\r\n            value={email}\r\n            placeholder='Email'\r\n            className='input' />\r\n        <input type='button' className='btn' value='Send' />\r\n    </div>\r\n\r\n    <div className='container--code_input'>\r\n        <input type='text' maxLength={1} className='code_input' />\r\n        <input type='text' maxLength={1} className='code_input' />\r\n        <input type='text' maxLength={1} className='code_input' />\r\n        <input type='text' maxLength={1} className='code_input' />\r\n        <input type='text' maxLength={1} className='code_input' />\r\n        <input type='text' maxLength={1} className='code_input' />\r\n        <input type='button' className='btn' value='Confirm' />\r\n\r\n    </div> */}\r\n\r\n            </div>\r\n        </div >\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default connect()(Main);","\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport axios from 'axios';\r\nimport { Store } from '../../../Store';\r\nimport React from 'react';\r\n\r\nconst newSwal = withReactContent(Swal);\r\n\r\n\r\n\r\nexport default (row, edit) => {\r\n    if (edit) {\r\n        let data = {\r\n            firstName: row.firstName,\r\n            lastName: row.lastName,\r\n            password: row.password,\r\n            email: row.email,\r\n            old_email: row.email\r\n        }\r\n        newSwal.fire({\r\n            title: 'Edit Data',\r\n\r\n            html: <>\r\n                <input type='text'\r\n                    defaultValue={row.firstName}\r\n                    onChange={e => data.firstName = e.target.value}\r\n                    className='input' />\r\n\r\n                <input type='text'\r\n                    defaultValue={row.lastName}\r\n                    onChange={e => data.lastName = e.target.value}\r\n                    className='input' />\r\n\r\n                <input type='text'\r\n                    defaultValue={row.password}\r\n                    onChange={e => data.password = e.target.value}\r\n                    className='input' />\r\n\r\n                <input type='email'\r\n                    defaultValue={row.email}\r\n                    onChange={e => data.email = e.target.value}\r\n                    className='input' />\r\n\r\n\r\n            </>,\r\n\r\n            preConfirm: function (val) {\r\n                axios.put('http://localhost:8000/admin/EditLecturerData', data, {\r\n                    headers: {\r\n                        'Authorization': Store.getState().token\r\n                    }\r\n                }).then(res => {\r\n                    \r\n                    if (res.data.success)\r\n                        newSwal.fire('Success', 'Information successfuly saved.');\r\n                })\r\n            },\r\n\r\n            confirmButtonText: 'Save'\r\n        })\r\n    } else {\r\n        axios.delete('http://localhost:8000/admin/DeleteLecturerData?email=' + row.email, \r\n        {\r\n            headers: {\r\n                'Authorization': Store.getState().token\r\n            }\r\n        }).then(res => {\r\n            if (res.data.success)\r\n                newSwal.fire('Success', 'Information successfuly deleted.');\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport EditRemove from './helper/EditRemoveData';\r\n\r\nlet style = {\r\n\r\n    headCells: {\r\n        style: {\r\n            fontFamily: 'Roboto, MotionPicture, TitilliumWeb, Arial',\r\n            fontSize: \"22px\",\r\n            fontWeight: 'bolder',\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n\r\n\r\n    rows: {\r\n        style: {\r\n            fontFamily: 'Roboto, MotionPicture, TitilliumWeb, Arial',\r\n            fontSize: \"18px\",\r\n            fontWeight: 'bolder',\r\n            minHeight: \"35px\",\r\n            maxHeight: \"35px\",\r\n            color: \"black\",\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n};\r\n\r\nlet columns = [\r\n\r\n    {\r\n        name: \"First name\",\r\n        selector: \"firstName\",\r\n        sortable: true,\r\n        searchable: true,\r\n        center: true,\r\n    },\r\n    {\r\n        name: \"Last name\",\r\n        selector: \"lastName\",\r\n        sortable: true,\r\n        center: true,\r\n    },\r\n    {\r\n        name: \"Email\",\r\n        selector: \"email\",\r\n        sortable: true,\r\n        center: true,\r\n    },\r\n    {\r\n        name: \"Password\",\r\n        selector: \"password\",\r\n        center: true,\r\n    },\r\n    {\r\n\r\n        cell: (row) => <div className='action'>\r\n            <button className='btn' onClick={e =>  EditRemove(row,true) }>Edit</button>\r\n            <button className='btn' onClick={e => EditRemove(row, false)}>Remove</button>\r\n        </div>\r\n\r\n    },\r\n    // {\r\n    //     name: \"Action\",\r\n    //     selector: \"action\",\r\n    //     center: true,\r\n    // }\r\n];\r\n\r\n\r\nexport { style, columns };","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport DataTable from \"react-data-table-component\";\r\n\r\n\r\nimport { Store } from '../../Store';\r\nimport { connect } from 'react-redux';\r\n\r\n// //Include SCSS Files\r\nimport \"./AdminMain.scss\";\r\n\r\n// //Own Components\r\n\r\nimport { style as ListStyle, columns as ListColumns } from './ListDataTableStyle.js';\r\n\r\n\r\n\r\nfunction Admin(props) {\r\n\r\n  let url = \"/admin\";\r\n  const history = useHistory();\r\n  const [type, setType] = useState('List');\r\n  const [list, setList] = useState([]);\r\n  // const [resultList, setResultList] = useState([]);\r\n\r\n\r\n  // const [filterResult, setFilterResult] = useState([]);\r\n  const [filterList, setFilterList] = useState([]);\r\n\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [subject, setSubject] = useState('');\r\n  const [password, setPassword] = useState('L12345678');\r\n  const [info, setInfo] = useState();\r\n\r\n  let GetList = () => {\r\n\r\n    useEffect(() => {\r\n      console.time();\r\n      axios.get(url + \"/GetLecturerList\", {\r\n        headers: {\r\n          'Authorization': Store.getState().token\r\n        }\r\n      }).then(res => {\r\n\r\n        setList([]);\r\n        let arr = [];\r\n        res.data.forEach(elem => {\r\n          arr.push({\r\n            'firstName': elem.firstName,\r\n            'lastName': elem.lastName,\r\n            'email': elem.email,\r\n            'password': elem.password,\r\n            'action': <div className='action'>\r\n              <input type='button' value='Edit' className='btn' onClick={e => {\r\n                console.log(e);\r\n              }} />\r\n              <input type='button' value='Remove' className='btn' />\r\n            </div>\r\n            // 'allow': <input type='checkbox' value={elem._id} onChange={e => e.target.checked ? setStudentIDs(array => [...array, e.target.value]) : setStudentIDs(studentIDs.filter(elem => elem !== e.target.value))} />\r\n          })\r\n        })\r\n        setList(arr);\r\n        setFilterList(arr);\r\n\r\n      });\r\n      console.timeEnd();\r\n    }, [])\r\n\r\n  }\r\n\r\n  let Filter = (value) => {\r\n    let arr = list.filter(elem => elem.firstName.includes(value) || elem.lastName.includes(value) || elem.email.includes(value));\r\n    if (arr.length > 0) setFilterList(arr); else setFilterList(list);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  let Add = () => {\r\n    //console.log(firstName, lastName, email, subject);\r\n    axios.post(url + '/InsertLecturer', {\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      email: email,\r\n      subject: subject,\r\n      password: password\r\n    }, {\r\n      headers: {\r\n        'Authorization': Store.getState().token\r\n      }\r\n    }).then(res => {\r\n      if (res.data.invalid) {\r\n        setInfo(res.data.msg)\r\n      } else {\r\n        setInfo(res.data);\r\n        setTimeout(() => {\r\n          setInfo('');\r\n        }, 3000);\r\n        setFirstName('');\r\n        setLastName('');\r\n        setEmail('');\r\n        setSubject('');\r\n      }\r\n\r\n      //console.log(res.data)\r\n    })\r\n  }\r\n\r\n  let AddLecturer = () => {\r\n    return <div className='Admin'>\r\n      <div >\r\n        <input type='text'\r\n          placeholder='First Name'\r\n          className='input'\r\n          value={firstName}\r\n          onChange={e => setFirstName(e.target.value)} />\r\n        <input type='text'\r\n          placeholder='Last Name'\r\n          className='input'\r\n          value={lastName}\r\n          onChange={e => setLastName(e.target.value)} />\r\n\r\n        <input type='text'\r\n          placeholder='Subject'\r\n          className='input'\r\n          value={subject}\r\n          onChange={e => setSubject(e.target.value)} />\r\n\r\n        <input type='text'\r\n          placeholder='Email'\r\n          value={email}\r\n          className='input'\r\n          onChange={e => setEmail(e.target.value)} />\r\n\r\n        <input type='text'\r\n          placeholder='Email'\r\n          value={password}\r\n          className='input'\r\n          onChange={e => setPassword(e.target.value)} />\r\n        <input type='button'\r\n          value='Add Lecturer'\r\n          className='btn'\r\n          onClick={e => Add()} />\r\n        <span>{info}</span>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  const LogOut = () => {\r\n    Store.dispatch({ type: 'LOGOUT' });\r\n    history.push('/');\r\n  }\r\n\r\n  let LecturerList = () => {\r\n    GetList();\r\n    return <>\r\n      <div className=\"menu2\" >\r\n        <input type='text' className='input' placeholder='Search' onChange={e => Filter(e.target.value)} />\r\n      </div>\r\n\r\n      <DataTable\r\n        data={filterList}\r\n        responsive={true}\r\n        columns={ListColumns}\r\n        customStyles={ListStyle}\r\n        noHeader={true}\r\n        fixedHeader={true}\r\n        className='ListViewDatatable'\r\n        defaultSortField='firstName'\r\n      />\r\n    </>\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div id=\"view\">\r\n        <div id=\"menu\">\r\n          <span className=\"name\">Administrator</span>\r\n          <div id=\"control\">\r\n            <input type='button' className='btn' value='Add Lecturer' onClick={e => setType('Add')} />\r\n            <input type='button' className='btn' value='Lecturers' onClick={e => setType('List')} />\r\n            <input type=\"button\" className=\"btn\" value=\"Log Out\" onClick={e => LogOut()} />\r\n          </div>\r\n        </div>\r\n\r\n        {\r\n          {\r\n            'List': LecturerList(),\r\n            'Add': AddLecturer()\r\n          }[type]\r\n        }\r\n\r\n\r\n\r\n\r\n      </div>\r\n    </>)\r\n}\r\n\r\nexport default connect()(Admin);","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\nimport \"./App.css\";\r\n\r\nimport Student from \"./components/Student/Student\";\r\nimport Lecturer from \"./components/Lecturer/Lecturer\";\r\nimport Main from './components/Main/Main';\r\nimport Admin from './components/Admin/Admin';\r\n\r\nimport { Store } from './Store';\r\n\r\n//import Admin from \"./components/Admin\";\r\n//import Test from './components/Student/Test';\r\n\r\n\r\nfunction App() {\r\n  window.baseURL = 'http://localhost:8000';\r\n\r\n  const Private = (props) => {\r\n    if (Store.getState().isAuth) {\r\n      if (Store.getState().userType === props.path.substr(1))\r\n        return <Route path={props.path} component={props.component} />; else\r\n        return <Redirect to={Store.getState().userType} />;\r\n    }\r\n    else return <Redirect to='/' />\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n\r\n        <Private path='/lecturer' component={Lecturer} />\r\n        <Private path='/student' component={Student} />\r\n        <Private path='/admin' component={Admin} />\r\n        <Route exact path='/' component={Main} />\r\n        <Route path='/*'>\r\n          <Redirect to='/' />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport { Store, Persistor } from './Store';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={Store}>\r\n      <PersistGate loading={null} persistor={Persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}